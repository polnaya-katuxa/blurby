/*
 * API for course project
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type Filter struct {
	Type string `json:"type"`

	Filter FilterFilter `json:"filter"`
}

// AssertFilterRequired checks if the required fields are not zero-ed
func AssertFilterRequired(obj Filter) error {
	elements := map[string]interface{}{
		"type":   obj.Type,
		"filter": obj.Filter,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertFilterFilterRequired(obj.Filter); err != nil {
		return err
	}
	return nil
}

// AssertRecurseFilterRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Filter (e.g. [][]Filter), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseFilterRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aFilter, ok := obj.(Filter)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertFilterRequired(aFilter)
	})
}
