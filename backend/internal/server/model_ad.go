/*
 * API for course project
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type Ad struct {
	Content string `json:"content"`

	CreateTime string `json:"create_time,omitempty"`

	Filters []Filter `json:"filters,omitempty"`

	UserID string `json:"userID"`

	Schedule Schedule `json:"schedule"`
}

// AssertAdRequired checks if the required fields are not zero-ed
func AssertAdRequired(obj Ad) error {
	elements := map[string]interface{}{
		"content":  obj.Content,
		"userID":   obj.UserID,
		"schedule": obj.Schedule,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.Filters {
		if err := AssertFilterRequired(el); err != nil {
			return err
		}
	}
	if err := AssertScheduleRequired(obj.Schedule); err != nil {
		return err
	}
	return nil
}

// AssertRecurseAdRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Ad (e.g. [][]Ad), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseAdRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aAd, ok := obj.(Ad)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertAdRequired(aAd)
	})
}
