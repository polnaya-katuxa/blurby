/*
API for course project

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FieldFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FieldFilter{}

// FieldFilter struct for FieldFilter
type FieldFilter struct {
	Field  *string `json:"field,omitempty"`
	Cmp    *string `json:"cmp,omitempty"`
	Value1 *string `json:"value1,omitempty"`
	Value2 *string `json:"value2,omitempty"`
}

// NewFieldFilter instantiates a new FieldFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFieldFilter() *FieldFilter {
	this := FieldFilter{}
	return &this
}

// NewFieldFilterWithDefaults instantiates a new FieldFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFieldFilterWithDefaults() *FieldFilter {
	this := FieldFilter{}
	return &this
}

// GetField returns the Field field value if set, zero value otherwise.
func (o *FieldFilter) GetField() string {
	if o == nil || IsNil(o.Field) {
		var ret string
		return ret
	}
	return *o.Field
}

// GetFieldOk returns a tuple with the Field field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldFilter) GetFieldOk() (*string, bool) {
	if o == nil || IsNil(o.Field) {
		return nil, false
	}
	return o.Field, true
}

// HasField returns a boolean if a field has been set.
func (o *FieldFilter) HasField() bool {
	if o != nil && !IsNil(o.Field) {
		return true
	}

	return false
}

// SetField gets a reference to the given string and assigns it to the Field field.
func (o *FieldFilter) SetField(v string) {
	o.Field = &v
}

// GetCmp returns the Cmp field value if set, zero value otherwise.
func (o *FieldFilter) GetCmp() string {
	if o == nil || IsNil(o.Cmp) {
		var ret string
		return ret
	}
	return *o.Cmp
}

// GetCmpOk returns a tuple with the Cmp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldFilter) GetCmpOk() (*string, bool) {
	if o == nil || IsNil(o.Cmp) {
		return nil, false
	}
	return o.Cmp, true
}

// HasCmp returns a boolean if a field has been set.
func (o *FieldFilter) HasCmp() bool {
	if o != nil && !IsNil(o.Cmp) {
		return true
	}

	return false
}

// SetCmp gets a reference to the given string and assigns it to the Cmp field.
func (o *FieldFilter) SetCmp(v string) {
	o.Cmp = &v
}

// GetValue1 returns the Value1 field value if set, zero value otherwise.
func (o *FieldFilter) GetValue1() string {
	if o == nil || IsNil(o.Value1) {
		var ret string
		return ret
	}
	return *o.Value1
}

// GetValue1Ok returns a tuple with the Value1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldFilter) GetValue1Ok() (*string, bool) {
	if o == nil || IsNil(o.Value1) {
		return nil, false
	}
	return o.Value1, true
}

// HasValue1 returns a boolean if a field has been set.
func (o *FieldFilter) HasValue1() bool {
	if o != nil && !IsNil(o.Value1) {
		return true
	}

	return false
}

// SetValue1 gets a reference to the given string and assigns it to the Value1 field.
func (o *FieldFilter) SetValue1(v string) {
	o.Value1 = &v
}

// GetValue2 returns the Value2 field value if set, zero value otherwise.
func (o *FieldFilter) GetValue2() string {
	if o == nil || IsNil(o.Value2) {
		var ret string
		return ret
	}
	return *o.Value2
}

// GetValue2Ok returns a tuple with the Value2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldFilter) GetValue2Ok() (*string, bool) {
	if o == nil || IsNil(o.Value2) {
		return nil, false
	}
	return o.Value2, true
}

// HasValue2 returns a boolean if a field has been set.
func (o *FieldFilter) HasValue2() bool {
	if o != nil && !IsNil(o.Value2) {
		return true
	}

	return false
}

// SetValue2 gets a reference to the given string and assigns it to the Value2 field.
func (o *FieldFilter) SetValue2(v string) {
	o.Value2 = &v
}

func (o FieldFilter) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FieldFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Field) {
		toSerialize["field"] = o.Field
	}
	if !IsNil(o.Cmp) {
		toSerialize["cmp"] = o.Cmp
	}
	if !IsNil(o.Value1) {
		toSerialize["value1"] = o.Value1
	}
	if !IsNil(o.Value2) {
		toSerialize["value2"] = o.Value2
	}
	return toSerialize, nil
}

type NullableFieldFilter struct {
	value *FieldFilter
	isSet bool
}

func (v NullableFieldFilter) Get() *FieldFilter {
	return v.value
}

func (v *NullableFieldFilter) Set(val *FieldFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldFilter(val *FieldFilter) *NullableFieldFilter {
	return &NullableFieldFilter{value: val, isSet: true}
}

func (v NullableFieldFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
