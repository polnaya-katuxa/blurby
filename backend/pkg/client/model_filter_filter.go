/*
API for course project

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// FilterFilter - struct for FilterFilter
type FilterFilter struct {
	EventFilter *EventFilter
	FieldFilter *FieldFilter
}

// EventFilterAsFilterFilter is a convenience function that returns EventFilter wrapped in FilterFilter
func EventFilterAsFilterFilter(v *EventFilter) FilterFilter {
	return FilterFilter{
		EventFilter: v,
	}
}

// FieldFilterAsFilterFilter is a convenience function that returns FieldFilter wrapped in FilterFilter
func FieldFilterAsFilterFilter(v *FieldFilter) FilterFilter {
	return FilterFilter{
		FieldFilter: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *FilterFilter) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into EventFilter
	err = newStrictDecoder(data).Decode(&dst.EventFilter)
	if err == nil {
		jsonEventFilter, _ := json.Marshal(dst.EventFilter)
		if string(jsonEventFilter) == "{}" { // empty struct
			dst.EventFilter = nil
		} else {
			match++
		}
	} else {
		dst.EventFilter = nil
	}

	// try to unmarshal data into FieldFilter
	err = newStrictDecoder(data).Decode(&dst.FieldFilter)
	if err == nil {
		jsonFieldFilter, _ := json.Marshal(dst.FieldFilter)
		if string(jsonFieldFilter) == "{}" { // empty struct
			dst.FieldFilter = nil
		} else {
			match++
		}
	} else {
		dst.FieldFilter = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.EventFilter = nil
		dst.FieldFilter = nil

		return fmt.Errorf("data matches more than one schema in oneOf(FilterFilter)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(FilterFilter)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src FilterFilter) MarshalJSON() ([]byte, error) {
	if src.EventFilter != nil {
		return json.Marshal(&src.EventFilter)
	}

	if src.FieldFilter != nil {
		return json.Marshal(&src.FieldFilter)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *FilterFilter) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.EventFilter != nil {
		return obj.EventFilter
	}

	if obj.FieldFilter != nil {
		return obj.FieldFilter
	}

	// all schemas are nil
	return nil
}

type NullableFilterFilter struct {
	value *FilterFilter
	isSet bool
}

func (v NullableFilterFilter) Get() *FilterFilter {
	return v.value
}

func (v *NullableFilterFilter) Set(val *FilterFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterFilter(val *FilterFilter) *NullableFilterFilter {
	return &NullableFilterFilter{value: val, isSet: true}
}

func (v NullableFilterFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
