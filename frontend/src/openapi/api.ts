/* tslint:disable */
/* eslint-disable */
/**
 * API for course project
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Ad
 */
export interface Ad {
    /**
     * 
     * @type {string}
     * @memberof Ad
     */
    'content': string;
    /**
     * 
     * @type {string}
     * @memberof Ad
     */
    'create_time'?: string;
    /**
     * 
     * @type {Array<Filter>}
     * @memberof Ad
     */
    'filters'?: Array<Filter>;
    /**
     * 
     * @type {string}
     * @memberof Ad
     */
    'userID': string;
    /**
     * 
     * @type {Schedule}
     * @memberof Ad
     */
    'schedule': Schedule;
}
/**
 * 
 * @export
 * @interface AdStat
 */
export interface AdStat {
    /**
     * 
     * @type {number}
     * @memberof AdStat
     */
    'num': number;
    /**
     * 
     * @type {string}
     * @memberof AdStat
     */
    'date': string;
}
/**
 * 
 * @export
 * @interface AuthRequest
 */
export interface AuthRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthRequest
     */
    'login': string;
    /**
     * 
     * @type {string}
     * @memberof AuthRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface AuthResponse
 */
export interface AuthResponse {
    /**
     * 
     * @type {string}
     * @memberof AuthResponse
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface Client
 */
export interface Client {
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    'surname': string;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    'patronymic': string;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    'gender': string;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    'birth_date': string;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    'registration_date': string;
    /**
     * 
     * @type {string}
     * @memberof Client
     */
    'email': string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof Client
     */
    'data': { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface ClientStats
 */
export interface ClientStats {
    /**
     * 
     * @type {number}
     * @memberof ClientStats
     */
    'num'?: number;
    /**
     * 
     * @type {number}
     * @memberof ClientStats
     */
    'avgAge'?: number;
}
/**
 * 
 * @export
 * @interface CreateAdRequest
 */
export interface CreateAdRequest {
    /**
     * 
     * @type {Ad}
     * @memberof CreateAdRequest
     */
    'ad': Ad;
}
/**
 * 
 * @export
 * @interface CreateAdResponse
 */
export interface CreateAdResponse {
    /**
     * 
     * @type {boolean}
     * @memberof CreateAdResponse
     */
    'created': boolean;
}
/**
 * 
 * @export
 * @interface CreateClientRequest
 */
export interface CreateClientRequest {
    /**
     * 
     * @type {Client}
     * @memberof CreateClientRequest
     */
    'client': Client;
}
/**
 * 
 * @export
 * @interface CreateClientResponse
 */
export interface CreateClientResponse {
    /**
     * 
     * @type {boolean}
     * @memberof CreateClientResponse
     */
    'created': boolean;
}
/**
 * 
 * @export
 * @interface CreateEventRequest
 */
export interface CreateEventRequest {
    /**
     * 
     * @type {Event}
     * @memberof CreateEventRequest
     */
    'event': Event;
}
/**
 * 
 * @export
 * @interface CreateEventResponse
 */
export interface CreateEventResponse {
    /**
     * 
     * @type {boolean}
     * @memberof CreateEventResponse
     */
    'passed': boolean;
}
/**
 * 
 * @export
 * @interface CreateEventTypeRequest
 */
export interface CreateEventTypeRequest {
    /**
     * 
     * @type {EventType}
     * @memberof CreateEventTypeRequest
     */
    'event_type': EventType;
}
/**
 * 
 * @export
 * @interface CreateEventTypeResponse
 */
export interface CreateEventTypeResponse {
    /**
     * 
     * @type {boolean}
     * @memberof CreateEventTypeResponse
     */
    'created': boolean;
}
/**
 * 
 * @export
 * @interface DeleteClientRequest
 */
export interface DeleteClientRequest {
    /**
     * 
     * @type {string}
     * @memberof DeleteClientRequest
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface DeleteClientResponse
 */
export interface DeleteClientResponse {
    /**
     * 
     * @type {boolean}
     * @memberof DeleteClientResponse
     */
    'deleted': boolean;
}
/**
 * 
 * @export
 * @interface DeleteUserRequest
 */
export interface DeleteUserRequest {
    /**
     * 
     * @type {string}
     * @memberof DeleteUserRequest
     */
    'login': string;
}
/**
 * 
 * @export
 * @interface DeleteUserResponse
 */
export interface DeleteUserResponse {
    /**
     * 
     * @type {boolean}
     * @memberof DeleteUserResponse
     */
    'deleted': boolean;
}
/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'systemMessage': string;
}
/**
 * 
 * @export
 * @interface Event
 */
export interface Event {
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    'clientID': string;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    'alias': string;
}
/**
 * 
 * @export
 * @interface EventFilter
 */
export interface EventFilter {
    /**
     * 
     * @type {string}
     * @memberof EventFilter
     */
    'alias'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventFilter
     */
    'span'?: string;
    /**
     * 
     * @type {number}
     * @memberof EventFilter
     */
    'rate'?: number;
}
/**
 * 
 * @export
 * @interface EventType
 */
export interface EventType {
    /**
     * 
     * @type {string}
     * @memberof EventType
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof EventType
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof EventType
     */
    'alias': string;
}
/**
 * 
 * @export
 * @interface FieldFilter
 */
export interface FieldFilter {
    /**
     * 
     * @type {string}
     * @memberof FieldFilter
     */
    'field'?: string;
    /**
     * 
     * @type {string}
     * @memberof FieldFilter
     */
    'cmp'?: string;
    /**
     * 
     * @type {string}
     * @memberof FieldFilter
     */
    'value1'?: string;
    /**
     * 
     * @type {string}
     * @memberof FieldFilter
     */
    'value2'?: string;
}
/**
 * 
 * @export
 * @interface Filter
 */
export interface Filter {
    /**
     * 
     * @type {string}
     * @memberof Filter
     */
    'type': string;
    /**
     * 
     * @type {FilterFilter}
     * @memberof Filter
     */
    'filter': FilterFilter;
}
/**
 * @type FilterFilter
 * @export
 */
export type FilterFilter = EventFilter | FieldFilter;

/**
 * 
 * @export
 * @interface FilterRequest
 */
export interface FilterRequest {
    /**
     * 
     * @type {Array<Filter>}
     * @memberof FilterRequest
     */
    'filters': Array<Filter>;
}
/**
 * 
 * @export
 * @interface FilterResponse
 */
export interface FilterResponse {
    /**
     * 
     * @type {number}
     * @memberof FilterResponse
     */
    'count': number;
}
/**
 * 
 * @export
 * @interface GetAdsResponse
 */
export interface GetAdsResponse {
    /**
     * 
     * @type {Array<Ad>}
     * @memberof GetAdsResponse
     */
    'ads': Array<Ad>;
}
/**
 * 
 * @export
 * @interface GetClientRequest
 */
export interface GetClientRequest {
    /**
     * 
     * @type {string}
     * @memberof GetClientRequest
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface GetClientResponse
 */
export interface GetClientResponse {
    /**
     * 
     * @type {Client}
     * @memberof GetClientResponse
     */
    'client': Client;
}
/**
 * 
 * @export
 * @interface GetClientStatsResponse
 */
export interface GetClientStatsResponse {
    /**
     * 
     * @type {ClientStats}
     * @memberof GetClientStatsResponse
     */
    'clientStats': ClientStats;
    /**
     * 
     * @type {Array<AdStat>}
     * @memberof GetClientStatsResponse
     */
    'adStats': Array<AdStat>;
}
/**
 * 
 * @export
 * @interface GetClientsResponse
 */
export interface GetClientsResponse {
    /**
     * 
     * @type {Array<Client>}
     * @memberof GetClientsResponse
     */
    'clients': Array<Client>;
}
/**
 * 
 * @export
 * @interface GetEventTypesResponse
 */
export interface GetEventTypesResponse {
    /**
     * 
     * @type {Array<EventType>}
     * @memberof GetEventTypesResponse
     */
    'event_types': Array<EventType>;
}
/**
 * 
 * @export
 * @interface GetUserByIDRequest
 */
export interface GetUserByIDRequest {
    /**
     * 
     * @type {string}
     * @memberof GetUserByIDRequest
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface GetUserRequest
 */
export interface GetUserRequest {
    /**
     * 
     * @type {string}
     * @memberof GetUserRequest
     */
    'login': string;
}
/**
 * 
 * @export
 * @interface GetUserResponse
 */
export interface GetUserResponse {
    /**
     * 
     * @type {User}
     * @memberof GetUserResponse
     */
    'user': User;
}
/**
 * 
 * @export
 * @interface GetUsersResponse
 */
export interface GetUsersResponse {
    /**
     * 
     * @type {Array<User>}
     * @memberof GetUsersResponse
     */
    'users': Array<User>;
}
/**
 * 
 * @export
 * @interface GrantAdminRequest
 */
export interface GrantAdminRequest {
    /**
     * 
     * @type {string}
     * @memberof GrantAdminRequest
     */
    'login': string;
}
/**
 * 
 * @export
 * @interface GrantAdminResponse
 */
export interface GrantAdminResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GrantAdminResponse
     */
    'granted': boolean;
}
/**
 * 
 * @export
 * @interface Schedule
 */
export interface Schedule {
    /**
     * 
     * @type {boolean}
     * @memberof Schedule
     */
    'periodic'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Schedule
     */
    'finished'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Schedule
     */
    'nextTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof Schedule
     */
    'span': string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'login': string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'isAdmin': boolean;
}
/**
 * 
 * @export
 * @interface UserInfoResponse
 */
export interface UserInfoResponse {
    /**
     * 
     * @type {User}
     * @memberof UserInfoResponse
     */
    'user': User;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateAdRequest} createAdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAd: async (createAdRequest: CreateAdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createAdRequest' is not null or undefined
            assertParamExists('createAd', 'createAdRequest', createAdRequest)
            const localVarPath = `/ads`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAdRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateClientRequest} createClientRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createClient: async (createClientRequest: CreateClientRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createClientRequest' is not null or undefined
            assertParamExists('createClient', 'createClientRequest', createClientRequest)
            const localVarPath = `/client`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createClientRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateEventRequest} createEventRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEvent: async (createEventRequest: CreateEventRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createEventRequest' is not null or undefined
            assertParamExists('createEvent', 'createEventRequest', createEventRequest)
            const localVarPath = `/events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createEventRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateEventTypeRequest} createEventTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEventType: async (createEventTypeRequest: CreateEventTypeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createEventTypeRequest' is not null or undefined
            assertParamExists('createEventType', 'createEventTypeRequest', createEventTypeRequest)
            const localVarPath = `/event_types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createEventTypeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeleteClientRequest} deleteClientRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClient: async (deleteClientRequest: DeleteClientRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteClientRequest' is not null or undefined
            assertParamExists('deleteClient', 'deleteClientRequest', deleteClientRequest)
            const localVarPath = `/client`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteClientRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeleteUserRequest} deleteUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (deleteUserRequest: DeleteUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteUserRequest' is not null or undefined
            assertParamExists('deleteUser', 'deleteUserRequest', deleteUserRequest)
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FilterRequest} filterRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filter: async (filterRequest: FilterRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'filterRequest' is not null or undefined
            assertParamExists('filter', 'filterRequest', filterRequest)
            const localVarPath = `/filter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(filterRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAds: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ads`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GetClientRequest} getClientRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClient: async (getClientRequest: GetClientRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getClientRequest' is not null or undefined
            assertParamExists('getClient', 'getClientRequest', getClientRequest)
            const localVarPath = `/client`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getClientRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientStats: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClients: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/clients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventTypes: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/event_types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GetUserRequest} getUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (getUserRequest: GetUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getUserRequest' is not null or undefined
            assertParamExists('getUser', 'getUserRequest', getUserRequest)
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GetUserByIDRequest} getUserByIDRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByID: async (getUserByIDRequest: GetUserByIDRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getUserByIDRequest' is not null or undefined
            assertParamExists('getUserByID', 'getUserByIDRequest', getUserByIDRequest)
            const localVarPath = `/user/id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getUserByIDRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GrantAdminRequest} grantAdminRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grantUserAdmin: async (grantAdminRequest: GrantAdminRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'grantAdminRequest' is not null or undefined
            assertParamExists('grantUserAdmin', 'grantAdminRequest', grantAdminRequest)
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(grantAdminRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AuthRequest} authRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (authRequest: AuthRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authRequest' is not null or undefined
            assertParamExists('login', 'authRequest', authRequest)
            const localVarPath = `/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AuthRequest} authRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: async (authRequest: AuthRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authRequest' is not null or undefined
            assertParamExists('register', 'authRequest', authRequest)
            const localVarPath = `/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userInfo: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateAdRequest} createAdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAd(createAdRequest: CreateAdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateAdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAd(createAdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateClientRequest} createClientRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createClient(createClientRequest: CreateClientRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateClientResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createClient(createClientRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateEventRequest} createEventRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEvent(createEventRequest: CreateEventRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateEventResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEvent(createEventRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateEventTypeRequest} createEventTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEventType(createEventTypeRequest: CreateEventTypeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateEventTypeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEventType(createEventTypeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DeleteClientRequest} deleteClientRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteClient(deleteClientRequest: DeleteClientRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteClientResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteClient(deleteClientRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DeleteUserRequest} deleteUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(deleteUserRequest: DeleteUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(deleteUserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {FilterRequest} filterRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filter(filterRequest: FilterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilterResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filter(filterRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAds(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAdsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAds(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GetClientRequest} getClientRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClient(getClientRequest: GetClientRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetClientResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClient(getClientRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClientStats(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetClientStatsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClientStats(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClients(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetClientsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClients(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEventTypes(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEventTypesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEventTypes(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GetUserRequest} getUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(getUserRequest: GetUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(getUserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GetUserByIDRequest} getUserByIDRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserByID(getUserByIDRequest: GetUserByIDRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserByID(getUserByIDRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUsersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GrantAdminRequest} grantAdminRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async grantUserAdmin(grantAdminRequest: GrantAdminRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrantAdminResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.grantUserAdmin(grantAdminRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AuthRequest} authRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(authRequest: AuthRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(authRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AuthRequest} authRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register(authRequest: AuthRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.register(authRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userInfo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userInfo(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateAdRequest} createAdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAd(createAdRequest: CreateAdRequest, options?: any): AxiosPromise<CreateAdResponse> {
            return localVarFp.createAd(createAdRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateClientRequest} createClientRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createClient(createClientRequest: CreateClientRequest, options?: any): AxiosPromise<CreateClientResponse> {
            return localVarFp.createClient(createClientRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateEventRequest} createEventRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEvent(createEventRequest: CreateEventRequest, options?: any): AxiosPromise<CreateEventResponse> {
            return localVarFp.createEvent(createEventRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateEventTypeRequest} createEventTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEventType(createEventTypeRequest: CreateEventTypeRequest, options?: any): AxiosPromise<CreateEventTypeResponse> {
            return localVarFp.createEventType(createEventTypeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeleteClientRequest} deleteClientRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClient(deleteClientRequest: DeleteClientRequest, options?: any): AxiosPromise<DeleteClientResponse> {
            return localVarFp.deleteClient(deleteClientRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeleteUserRequest} deleteUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(deleteUserRequest: DeleteUserRequest, options?: any): AxiosPromise<DeleteUserResponse> {
            return localVarFp.deleteUser(deleteUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FilterRequest} filterRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filter(filterRequest: FilterRequest, options?: any): AxiosPromise<FilterResponse> {
            return localVarFp.filter(filterRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAds(options?: any): AxiosPromise<GetAdsResponse> {
            return localVarFp.getAds(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GetClientRequest} getClientRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClient(getClientRequest: GetClientRequest, options?: any): AxiosPromise<GetClientResponse> {
            return localVarFp.getClient(getClientRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientStats(options?: any): AxiosPromise<GetClientStatsResponse> {
            return localVarFp.getClientStats(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClients(options?: any): AxiosPromise<GetClientsResponse> {
            return localVarFp.getClients(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventTypes(options?: any): AxiosPromise<GetEventTypesResponse> {
            return localVarFp.getEventTypes(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GetUserRequest} getUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(getUserRequest: GetUserRequest, options?: any): AxiosPromise<GetUserResponse> {
            return localVarFp.getUser(getUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GetUserByIDRequest} getUserByIDRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByID(getUserByIDRequest: GetUserByIDRequest, options?: any): AxiosPromise<GetUserResponse> {
            return localVarFp.getUserByID(getUserByIDRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(options?: any): AxiosPromise<GetUsersResponse> {
            return localVarFp.getUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GrantAdminRequest} grantAdminRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grantUserAdmin(grantAdminRequest: GrantAdminRequest, options?: any): AxiosPromise<GrantAdminResponse> {
            return localVarFp.grantUserAdmin(grantAdminRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AuthRequest} authRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(authRequest: AuthRequest, options?: any): AxiosPromise<AuthResponse> {
            return localVarFp.login(authRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AuthRequest} authRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(authRequest: AuthRequest, options?: any): AxiosPromise<AuthResponse> {
            return localVarFp.register(authRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userInfo(options?: any): AxiosPromise<UserInfoResponse> {
            return localVarFp.userInfo(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {CreateAdRequest} createAdRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createAd(createAdRequest: CreateAdRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createAd(createAdRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateClientRequest} createClientRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createClient(createClientRequest: CreateClientRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createClient(createClientRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateEventRequest} createEventRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createEvent(createEventRequest: CreateEventRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createEvent(createEventRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateEventTypeRequest} createEventTypeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createEventType(createEventTypeRequest: CreateEventTypeRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createEventType(createEventTypeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeleteClientRequest} deleteClientRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteClient(deleteClientRequest: DeleteClientRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteClient(deleteClientRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DeleteUserRequest} deleteUserRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteUser(deleteUserRequest: DeleteUserRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteUser(deleteUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FilterRequest} filterRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public filter(filterRequest: FilterRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).filter(filterRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAds(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAds(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GetClientRequest} getClientRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getClient(getClientRequest: GetClientRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getClient(getClientRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getClientStats(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getClientStats(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getClients(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getClients(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getEventTypes(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getEventTypes(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GetUserRequest} getUserRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUser(getUserRequest: GetUserRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUser(getUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GetUserByIDRequest} getUserByIDRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUserByID(getUserByIDRequest: GetUserByIDRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUserByID(getUserByIDRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUsers(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GrantAdminRequest} grantAdminRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public grantUserAdmin(grantAdminRequest: GrantAdminRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).grantUserAdmin(grantAdminRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthRequest} authRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public login(authRequest: AuthRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).login(authRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthRequest} authRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public register(authRequest: AuthRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).register(authRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public userInfo(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).userInfo(options).then((request) => request(this.axios, this.basePath));
    }
}


